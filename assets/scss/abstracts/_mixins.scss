// ===== MIXINS REUTILIZABLES =====

// Mixin para sombras de caja con hover
@mixin card-hover-effect($base-shadow: $box-shadow, $hover-shadow: $box-shadow-lg) {
  box-shadow: $base-shadow;
  transition: $transition-base;
  
  &:hover {
    box-shadow: $hover-shadow;
    transform: translateY(-3px);
  }
}

// Mixin para botones con efectos hover
@mixin button-hover-effect($bg-color, $hover-bg-color, $shadow-color: null) {
  background-color: $bg-color;
  transition: $transition-base;
  
  &:hover {
    background-color: $hover-bg-color;
    transform: translateY(-2px);
    
    @if $shadow-color {
      box-shadow: 0 4px 8px rgba($shadow-color, 0.3);
    }
  }
  
  &:active {
    transform: translateY(0);
  }
}

// Mixin para centrar elementos
@mixin center-element($position: absolute) {
  position: $position;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Mixin para texto truncado
@mixin text-truncate($width: 100%) {
  width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Mixin para aspect ratio
@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;
  overflow: hidden;
  
  &::before {
    content: '';
    display: block;
    padding-top: calc(#{$height} / #{$width} * 100%);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// Mixin para gradientes
@mixin gradient-background($color1, $color2, $direction: 135deg) {
  background: linear-gradient($direction, $color1, $color2);
}

// Mixin para focus states accesibles
@mixin focus-outline($color: $primary, $width: 2px, $offset: 2px) {
  &:focus {
    outline: $width solid $color;
    outline-offset: $offset;
  }
}

// Mixin para padding responsive
@mixin responsive-padding($mobile: 1rem, $tablet: 1.5rem, $desktop: 2rem) {
  padding: $mobile;
  
  @include media-breakpoint-up(md) {
    padding: $tablet;
  }
  
  @include media-breakpoint-up(lg) {
    padding: $desktop;
  }
}

// Mixin para margin responsive
@mixin responsive-margin($mobile: 1rem, $tablet: 1.5rem, $desktop: 2rem) {
  margin: $mobile;
  
  @include media-breakpoint-up(md) {
    margin: $tablet;
  }
  
  @include media-breakpoint-up(lg) {
    margin: $desktop;
  }
}

// Mixin para grid responsivo
@mixin responsive-grid($mobile: 1, $tablet: 2, $desktop: 3, $gap: 1.5rem) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat($mobile, 1fr);
  
  @include media-breakpoint-up(md) {
    grid-template-columns: repeat($tablet, 1fr);
  }
  
  @include media-breakpoint-up(lg) {
    grid-template-columns: repeat($desktop, 1fr);
  }
}

// Mixin para overlay
@mixin overlay($color: rgba(0, 0, 0, 0.5), $z-index: 1) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: $color;
    z-index: $z-index;
  }
}

// Mixin para animaciones de carga
@mixin loading-animation($duration: 1.5s) {
  position: relative;
  overflow: hidden;
  
  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba($primary, 0.2), transparent);
    animation: loading $duration infinite;
  }
  
  @keyframes loading {
    0% { left: -100%; }
    100% { left: 100%; }
  }
}

// Mixin para wrapper principal del proyecto
@mixin main-wrapper() {
  width: $te-vendo-wrapper-width;
  margin: $te-vendo-wrapper-margin;
  border: $te-vendo-wrapper-border;
  padding: $te-vendo-wrapper-padding;
  background-color: white;
  border-radius: $border-radius-lg;
  box-shadow: $box-shadow;
  
  @media (max-width: 768px) {
    width: 95%;
    padding: 15px;
    margin: 10px auto;
  }
}

// Mixins para breakpoints (reemplazar los de Bootstrap)
@mixin media-breakpoint-up($name) {
  @if $name == sm {
    @media (min-width: 576px) { @content; }
  } @else if $name == md {
    @media (min-width: 768px) { @content; }
  } @else if $name == lg {
    @media (min-width: 992px) { @content; }
  } @else if $name == xl {
    @media (min-width: 1200px) { @content; }
  } @else if $name == xxl {
    @media (min-width: 1400px) { @content; }
  }
}

@mixin media-breakpoint-down($name) {
  @if $name == sm {
    @media (max-width: 575.98px) { @content; }
  } @else if $name == md {
    @media (max-width: 767.98px) { @content; }
  } @else if $name == lg {
    @media (max-width: 991.98px) { @content; }
  } @else if $name == xl {
    @media (max-width: 1199.98px) { @content; }
  } @else if $name == xxl {
    @media (max-width: 1399.98px) { @content; }
  }
}

@mixin media-breakpoint-only($name) {
  @if $name == sm {
    @media (min-width: 576px) and (max-width: 767.98px) { @content; }
  } @else if $name == md {
    @media (min-width: 768px) and (max-width: 991.98px) { @content; }
  } @else if $name == lg {
    @media (min-width: 992px) and (max-width: 1199.98px) { @content; }
  } @else if $name == xl {
    @media (min-width: 1200px) and (max-width: 1399.98px) { @content; }
  }
}